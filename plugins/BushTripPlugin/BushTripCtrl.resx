<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="statusStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>132, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAEZTeXN0ZW0uV2luZG93cy5Gb3JtcywgQ3VsdHVyZT1uZXV0cmFs
        LCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BQEAAAAmU3lzdGVtLldpbmRvd3MuRm9ybXMu
        SW1hZ2VMaXN0U3RyZWFtZXIBAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAbAoAAAJNU0Z0AUkBTAIBAQUB
        AAEIAQABCAEAARABAAEQAQAE/wEhAQAI/wFCAU0BNgcAATYDAAEoAwABQAMAASADAAEBAQABIAYAASD/
        AP8AGAADRQHDAxcB/wMXAf8DFwH/AxcB/wMXAf8DFwH/AxcB/wMXAf8DFwH/AxcB/wMXAf8DFwH/A0QB
        wsgAAxcB/wQAAwYBBwNBAc4DOgFjEAADOgFkAzwB0wMHAQkEAAMXAf/IAAMXAf8EAANHAZIDSAGrGAAD
        SQGmA0cBkQQAAxcB/8gAAxcB/wMvAUoDNAHhAw4BEhgAAwwBDwM2Ad4DMgFPAxcB/8gAAxcB/wMxAecD
        JgE5IAADJgE5AzEB5wMXAf/IAAMXAf8DQgF7EAADPAHDAzwBwhAAA0IBewMXAf/IAAMXAf8DQgF7EAAD
        OwHFAzwBwxAAA0IBewMXAf/IAAMXAf8DMQHnAyYBOSAAAyYBOQMxAecDFwH/yAADFwH/Ay8BSgM0AeED
        DgESGAADDAEPAzYB3gMyAU8DFwH/yAADFwH/BAADRwGSA0gBqxgAA0kBpgNHAZEEAAMXAf/IAAMXAf8E
        AAMGAQcDQQHOAzoBYxAAAzoBZAM8AdMDBwEJBAADFwH/yAADQwHFAxcB/wMXAf8DFwH/AxcB/wMXAf8D
        FwH/AxcB/wMXAf8DFwH/AxcB/wMXAf8DFwH/A0UBw/8A/wD/ANcAAxIBGANDAYMDMwHQAw8B9QMTAfID
        NgHMA0IBgAMPARMUAANFAcMDFwH/AxcB/wMXAf8DFwH/BAADNwFbAzYBWgQAAxcB/wMXAf8DFwH/AxcB
        /wNEAcIgAANCAYADQgGAKAAEAQM/AXADRQGIA0UBiANFAYgDRQGIA0UBiANFAYgDPwFwBAEYAAMvAUkD
        GAHtA0QBmQMpAT4DDwEUAw8BEwMrAUIDRQGYAxgB7QMzAVEQAAMXAf8wAAMXAf8gAANCAYADQgGAKAAD
        OQFfA0ABzwNBAXcDQQF3A0EBdwNBAXcDQQF3A0EBdwNAAc8DOQFfFAADMwFUAycB4AMnAToYAAMkATUD
        HgHpAzIBUAwAAxcB/wQAA0EBtQwAAzcBWwM2AVoMAANBAbUEAAMXAf8gAANCAYADQgGAJAADCgENAzIB
        5AMlATYYAAMjATMDMAHmAwsBDgwAAxIEGAHtAycBOggAAzgBXwMYASADGAEgAzgBXwgAAyUBNgMdAeoD
        DwEUCAADFwH/CAADOQFhAxoBJBAAAxsBJQM5AWAIAAMXAf8YAAMXAR8DRAGmAxQB8QMTAfADQwGlAxYB
        HhwAA0YBiQNIAZ4gAANIAZ8DRQGIDAADQwGFA0UBlwwAAzQBVQMdAeoDFgHuAzsBZgwAA0UBngNCAX8I
        AAMXAf8IAAMbASUDDAEPA0cBjgMqAesDMQHlA0UBiAMNAREDGwElCAADFwH/FAADFwQfAecDPgFxAw8B
        FAMTARoDQAF3AyQB5QMWAR4UAAMZASMDKgHrAxMBGSAAAxIBFwMqAeoDGwEmCAADMgHTAygBPBAAA0IB
        gANCAYAQAAMoATwDNgHMGAADRwGPA0gBswMSARgDEwEaA0gBswNFAYckAANEAacDPgFwEAADQAF4A0MB
        pRQAA0cBtANAAXQoAANAAXUDSAGzCAADEQH0Aw8BFAQAAyMBMgMTARoEAANCAYADQgGABAADEwEaAyMB
        MgQAAw8BEwMUAfEIAAM2AVkEAAM2AVkEAAMrAe0DEgEYAzwBwwM8AcIDEwEaAzEB5QQAAzYBWQQAAzYB
        WQgAA0MBiANDAYgDQwGIAxQB8QMOARIQAAMTARoDFAHxA0MBiANDAYgDQwGIBAADLQFFAzoB2AMFAQYQ
        AAM8AcMDPAHCEAADBQEGAzoB2AMtAUUEAAMdAeoDCwEOBAADMgFQAx0B6gNDAaoDQwGtA0MBrQNDAaoD
        HQHqAzIBUAQAAwsBDgMPAfUIAAM2AVoEAAM2AVoEAAMqAe4DEgEXAzsBxQM8AcMDFgEdAyoB6wQAAzYB
        WgQAAzYBWggAA0ABdwNAAXcDQAF3AxQB8QMNAREQAAMPBBQB8QNAAXcDQAF3A0ABdwQAAy0BRQM6AdgD
        BQEGEAADOwHFAzwBwxAAAwUBBgM6AdgDLQFFBAADNwHNAysBQQgAAwoBDQNAAXcDFgHuAxMB8gNDAYgD
        DQERCAADJgE5AzMB0BgAA0cBjgNHAa8DEgEYAxUBHANHAbYDRwGOJAADRAGoAz4BcRAAAz4BcQNEAaYU
        AANGAbUDQAFzKAADQAF0A0cBtAgAA0ABeANFAZcQAANCAYADQgGAEAADRQGUA0MBhAgAAxcB/wgAAxsB
        JQMNAREDRwGOAyYB8QMqAe4DRwGOAwwBDwMbASUIAAMXAf8UAAMYASADHwHnAz4BcQMLAQ4DDQERAz4B
        cQMfAecDFwEfFAADGgEkAyoB6wMTARkgAAMRARYDKgHqAxwBJwgAAxMBGQMWAe4DIwEyDAADPQFuAz0B
        bgwAAyIBMQMdAesDEgEYCAADFwH/CAADOQFhAxoBJBAAAxsBJQM5AWEIAAMXAf8YAAMYASADRAGoAxQB
        8QMUAfEDRAGnAxcBHxwAA0YBigNIAZ0gAANIAZ4DRgGJEAADNQFYAx8B6AMkATQYAAMhATADJgHfAy8B
        SQwAAxcB/wQAA0EBtQwAAzcBWwM2AVoMAANBAbUEAAMXAf8gAANCAYADQgGAJAADCgENAzIB5AMlATYY
        AAMjATIDMAHmAwwBDxQAAzUBWAMdAesDRQGbAycBOgMPARMDCQELAyUBNwNEAZMDHQHrAzMBVBAAAxcB
        /zAAAxcB/yAAA0IBgANCAYAoAAM5AV8DPAHTA0UBiANFAYgDRQGIA0UBiANFAYgDRQGIAzwB0wM5AV8c
        AAMTARkDQAF4AzYBzAMdAesDEwHyAzIB0wNDAYQDEgEYFAADQwHFAxcB/wMXAf8DFwH/AxcB/wQAAzcB
        WwM2AVoEAAMXAf8DFwH/AxcB/wMXAf8DRQHDIAADQgGAA0IBgCgABAEDPAFoA0EBdwNBAXcDQQF3A0EB
        dwNBAXcDQQF3AzwBaAQB/wANAAFCAU0BPgcAAT4DAAEoAwABQAMAASADAAEBAQABAQYAAQEWAAP/AQAC
        /wYAAv8GAAGAAQEGAAGjAcUGAAGnAeUGAAGHAeEGAAGPAfEGAAGeAXkGAAGeAXkGAAGPAfEGAAGHAeEG
        AAGnAeUGAAGjAcUGAAGAAQEGAAL/BgAC/wYACP8B8AEPAYIBQQH+AX8B4AEHAeABBwG/Af0B/gF/AeAB
        BwHHAeMBrgF1Af4BfwHHAeMBjAExAbMBzQH4AR8BzwHzAZwBOQGwAQ0B8AEPAY8B8QGeAXkB+AEfAfMB
        zwGfAfkBkgFJAagBFQGDAcEBHgF4AZABCQGoARUBgwHBAR4BeAGYARkB+AEfAfMBzwGfAfkBngF5AbAB
        DQHwAQ8BjwHxAY4BcQGzAc0B+AEfAc8B8wHHAeMBrgF1Af4BfwHHAeMB4AEHAb8B/QH+AX8B4AEHAfAB
        DwGCAUEB/gF/AeABBwj/Cw==
</value>
  </data>
</root>